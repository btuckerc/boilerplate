#!/bin/zsh

# Ensure Starship environment variables are set
export STARSHIP_SHELL="zsh"
export STARSHIP_CONFIG="$HOME/.config/starship.toml"

# Load Starship prompt if installed (do this early to ensure proper initialization)
if command -v starship >/dev/null; then
    eval "$(starship init zsh)"
fi

# Load aliases (these should always be available)
if [ -f "$HOME/.zsh_aliases" ]; then
    source "$HOME/.zsh_aliases"
fi

# Pyenv setup
if command -v pyenv >/dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"

    if pyenv commands | grep -q virtualenv-init; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

# Functions
dev() {
    TARGET_DIR=~/Documents/GitHub
    if [ ! -d "$TARGET_DIR" ]; then
        echo "$(date): GitHub directory not found. Creating..." >> ~/.shellrc_log
        mkdir -p "$TARGET_DIR"
    fi
    cd "$TARGET_DIR" || echo "$(date): Failed to navigate to $TARGET_DIR" >> ~/.shellrc_log
}

venv() {
    if [ ! -d "venv" ]; then
        echo "Creating virtual environment..."
        python3 -m venv venv
    fi
    echo "Activating virtual environment..."
    source venv/bin/activate
}

# File extraction helper
ee() {
    if [ -f "$1" ]; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Archive creation helpers
mtar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mzip() { zip -r "${1%%/}.zip" "$1" ; }

# File swap function
swap() {
    local TMPFILE=tmp.$$
    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e "$1" ] && echo "swap: $1 does not exist" && return 1
    [ ! -e "$2" ] && echo "swap: $2 does not exist" && return 1
    mv "$1" "$TMPFILE"
    mv "$2" "$1"
    mv "$TMPFILE" "$2"
}

# New note helper function
nn() {
  # Check if an argument is provided
  if [ -z "$1" ]; then
    echo "Error: No filename provided."
    return 1
  fi

  # Use only the first argument, ignore others
  local filename="$1.md"

  # Open the new file in Vim
  vim "$filename"
}

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Environment variables
export DEV_DIR=~/Documents/GitHub
export EDITOR="nvim"
export PATH="$PATH:$HOME/.local/bin"

# History settings (Zsh-specific)
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY

# Zsh-specific settings
setopt AUTO_CD              # If command is a directory path, cd into it
setopt NO_CASE_GLOB        # Case insensitive globbing
setopt NUMERIC_GLOB_SORT   # Sort filenames numerically when relevant
setopt EXTENDED_GLOB       # Extended globbing capabilities

# Load Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

# Load FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Load Cargo
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Load Deno
[ -f "$HOME/.deno/env" ] && source "$HOME/.deno/env"

# Load secrets if they exist
[ -f ~/.secrets ] && source ~/.secrets

# Logging
LOGFILE=~/.shellrc_log
echo "$(date): Zsh shell loaded" >> $LOGFILE

# Kitty shell integration
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

# Enhanced completion settings
autoload -Uz compinit
compinit

# Better completion styles
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # Case insensitive completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"   # Colored completion (using ls colors)
zstyle ':completion:*' verbose yes
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:messages' format '%F{purple}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}-- no matches found --%f'

# Additional Zsh settings
setopt AUTO_PUSHD           # Push the current directory visited on the stack
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd
setopt CORRECT              # Spelling correction for commands
setopt CDABLE_VARS         # Change directory to a path stored in a variable
setopt EXTENDED_GLOB       # Use extended globbing syntax
setopt BANG_HIST          # Treat the '!' character specially during expansion
setopt MULTIOS            # Write to multiple descriptors
setopt INTERACTIVE_COMMENTS # Allow comments in interactive shells

# Load plugins (must be at the end of .zshrc)
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Configure autosuggestions
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=1
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244' # Slightly darker gray for better visibility

# Keybindings for accepting suggestions
bindkey '^I' autosuggest-accept      # Tab
bindkey '^ ' autosuggest-accept      # Ctrl + Space
bindkey '^f' forward-word            # Ctrl + F to move forward one word
bindkey '^[[C' forward-char          # Right arrow to move forward one character

# Better history searching
bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward
bindkey '^p' up-line-or-search
bindkey '^n' down-line-or-search

# Better word navigation
bindkey '^b' backward-word
bindkey '^w' forward-word
