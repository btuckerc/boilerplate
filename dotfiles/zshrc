#!/bin/zsh

# Ensure Starship environment variables are set
export STARSHIP_SHELL="zsh"
export STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"

# Load Starship prompt if installed (do this early to ensure proper initialization)
if command -v starship >/dev/null; then
    eval "$(starship init zsh)"
fi

# Load aliases (these should always be available)
if [ -f "$ZDOTDIR/.zsh_aliases" ]; then
    source "$ZDOTDIR/.zsh_aliases"
fi

# Pyenv setup
if command -v pyenv >/dev/null; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"

    if pyenv commands | grep -q virtualenv-init; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

# Functions
dev() {
    TARGET_DIR=~/Documents/GitHub
    if [ ! -d "$TARGET_DIR" ]; then
        echo "$(date): GitHub directory not found. Creating..." >> ~/.shellrc_log
        mkdir -p "$TARGET_DIR"
    fi
    cd "$TARGET_DIR" || echo "$(date): Failed to navigate to $TARGET_DIR" >> ~/.shellrc_log
}

venv() {
    if [ ! -d "venv" ]; then
        echo "Creating virtual environment..."
        python3 -m venv venv
    fi
    echo "Activating virtual environment..."
    source venv/bin/activate
}


# File extraction helper
ee() {
    if [ -f "$1" ]; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Archive creation helpers
mtar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mzip() { zip -r "${1%%/}.zip" "$1" ; }

# File swap function
swap() {
    local TMPFILE=tmp.$$
    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e "$1" ] && echo "swap: $1 does not exist" && return 1
    [ ! -e "$2" ] && echo "swap: $2 does not exist" && return 1
    mv "$1" "$TMPFILE"
    mv "$2" "$1"
    mv "$TMPFILE" "$2"
}

# New note helper function
nn() {
    # Check if an argument is provided
    if [ -z "$1" ]; then
        echo "Error: No filename provided."
        return 1
    fi

  # Use only the first argument, ignore others
  local filename="$1.md"

  # Open the new file in Vim
  vim "$filename"
}

y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
        if [ -n "$TMUX" ]; then
            tmux refresh-client -c "$cwd"
        fi
    fi
    rm -f -- "$tmp"
}

# Key code helper
showkey() {
    echo "Press any key combination to see its key code (Ctrl+C to exit)"
    while true; do
        read -k 1 -s key
        echo -n "Key pressed: "
        printf '%q' "$key" | sed 's/\^/Ctrl+/g'
        echo
        echo -n "Hex: "
        printf '%q' "$key" | xxd
    done
}

# tmux launcher
t () {
    if [[ -z $TMUX ]]; then
        if tmux has-session -t T 2>/dev/null; then
            tmux attach-session -t T
        else
            tmux new-session -s T
        fi
    fi
}

mc() {
  local dir="$1"
  if [[ -z "$dir" ]]; then
    echo "Usage: mc <directory>"
    return 1
  fi
  mkdir -p -- "$dir" && cd -- "$dir"
}

# load modules
zmodload zsh/complist
autoload -U compinit && compinit
autoload -U colors && colors

# Carapace completions - multi-shell completion library
# Provides completions for hundreds of CLI tools
if command -v carapace >/dev/null; then
    export CARAPACE_BRIDGES='zsh,fish,bash'  # Bridge completions from other shells
    source <(carapace _carapace)
fi

# History settings (Zsh-specific)
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt EXTENDED_HISTORY        # Record timestamp of command in history
setopt INC_APPEND_HISTORY      # Write to history file immediately
setopt HIST_EXPIRE_DUPS_FIRST  # Expire duplicate entries first when trimming history
setopt HIST_IGNORE_ALL_DUPS    # Delete old recorded entry if new entry is a duplicate
setopt HIST_FIND_NO_DUPS       # Do not display a line previously found
setopt HIST_SAVE_NO_DUPS       # Don't write duplicate entries in the history file
setopt HIST_REDUCE_BLANKS      # Remove superfluous blanks before recording entry
HISTSIZE=1000000
SAVEHIST=1000000
HISTFILE="$XDG_CACHE_HOME/zsh_history" # move histfile to cache
HISTCONTROL=ignoreboth # consecutive duplicates & commands starting with space are not saved

# Load Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

# Load FZF
[ -f "$XDG_CONFIG_HOME/fzf/.fzf.zsh" ] && source "$XDG_CONFIG_HOME/fzf/fzf.zsh"

# Force emacs mode (normal terminal behavior) - overrides vi mode from EDITOR=nvim
bindkey -e

# Vanilla zsh Ctrl-R (traditional incremental search)
bindkey '^r' history-incremental-search-backward

# Zsh-specific settings
setopt AUTO_CD              # If command is a directory path, cd into it
setopt NO_CASE_GLOB        # Case insensitive globbing
setopt NUMERIC_GLOB_SORT   # Sort filenames numerically when relevant
setopt EXTENDED_GLOB       # Extended globbing capabilities

# Load Cargo
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# Load Deno
[ -f "$HOME/.deno/env" ] && source "$HOME/.deno/env"

# Load secrets if they exist
[ -f ~/.secrets ] && source ~/.secrets

# Logging
LOGFILE=~/.shellrc_log
echo "$(date): Zsh shell loaded" >> $LOGFILE

# Kitty shell integration
if test -n "$KITTY_INSTALLATION_DIR"; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

# Minimal completion styles for carapace
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'  # Case insensitive matching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$HOME/.zcompcache"

# Tab completion for carapace
bindkey '^I' complete-word                 # Tab for normal zsh completion

# Better history searching
# bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward
bindkey '^p' up-line-or-search
bindkey '^n' down-line-or-search

# Better word navigation
# bindkey '^b' backward-word
# bindkey '^w' forward-word

# Additional Zsh settings
setopt AUTO_PUSHD           # Push the current directory visited on the stack
setopt PUSHD_IGNORE_DUPS    # Do not store duplicates in the stack
setopt PUSHD_SILENT         # Do not print the directory stack after pushd or popd
# setopt CORRECT              # Spelling correction for commands
setopt CDABLE_VARS         # Change directory to a path stored in a variable
setopt EXTENDED_GLOB       # Use extended globbing syntax
setopt BANG_HIST          # Treat the '!' character specially during expansion
setopt MULTIOS            # Write to multiple descriptors
setopt INTERACTIVE_COMMENTS # Allow comments in interactive shells
setopt COMPLETE_IN_WORD    # Complete from both ends of a word
setopt ALWAYS_TO_END      # Move cursor to the end of a completed word
setopt PATH_DIRS          # Perform path search even on command names with slashes
# setopt AUTO_MENU         # Show completion menu on a successive tab press
setopt AUTO_LIST         # Automatically list choices on ambiguous completion
setopt AUTO_PARAM_SLASH  # If completed parameter is a directory, add a trailing slash
setopt NO_MENU_COMPLETE  # Do not autoselect the first completion entry
setopt append_history inc_append_history share_history # better history
# on exit, history appends rather than overwrites; history is appended as soon as cmds executed; history shared across sessions
setopt auto_menu menu_complete # autocmp first menu match
# setopt autocd # type a dir to cd
setopt no_case_glob no_case_match # make cmp case insensitive
setopt globdots # include dotfiles
setopt extended_glob # match ~ # ^
# unsetopt prompt_sp # don't autoclean blanklines
stty stop undef # disable accidental ctrl s

# Load plugins (must be at the end of .zshrc)
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Auto-attach to "main" session in Tmux
t

. "$HOME/.local/share/../bin/env"
