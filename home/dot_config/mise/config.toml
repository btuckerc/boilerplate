# Managed by chezmoi - https://github.com/btuckerc/boilerplate
# Global tool versions managed by mise
# https://mise.jdx.dev/configuration.html
#
# Project-specific overrides should go in project mise.toml or .mise.toml files
# mise also supports idiomatic version files like .node-version, .python-version, etc.

[tools]
# Language runtimes
# Use 'lts' for Long Term Support versions, or specify exact versions
node = "lts"              # Latest LTS version of Node.js
python = "3.13"           # Python 3.13.x (matches current system)
go = "1.25"               # Go 1.25.x (matches current system)

# Additional tools can be added here
# Examples:
# rust = "latest"
# deno = "latest"
# bun = "latest"

[env]
# Global environment variables (if needed)
# Example:
# NODE_ENV = "development"

[settings]
# Mise behavior settings
experimental = true                # Enable experimental features
legacy_version_file = true         # Support .nvmrc, .python-version, .tool-versions, etc.
legacy_version_file_disable_tools = []  # Don't disable any legacy file support
always_keep_download = false       # Don't keep downloads after installation
plugin_autoupdate_last_check_duration = "7d"  # Check for plugin updates weekly
jobs = 4                           # Number of parallel jobs for installations
verbose = false                    # Don't show verbose output by default
asdf_compat = true                 # Enable asdf compatibility mode

# Python-specific settings
[settings.python]
venv_auto_create = false           # Don't auto-create venvs (we use pyenv/manual venvs)

# Note: Node-specific settings like default_packages_file are not supported in mise
# Use project-specific mise.toml or global npm config instead

# Tasks can be defined here for global commands
# [tasks]
# Example:
# hello = "echo 'Hello from mise!'"
