#!/bin/zsh
# Managed by chezmoi - https://github.com/btuckerc/boilerplate
# Zsh configuration file

# Source shared POSIX-compatible configuration
[ -f "$HOME/.config/shell/common.sh" ] && . "$HOME/.config/shell/common.sh"

# === Zsh-Specific Configuration ===

# Load Starship prompt early for proper initialization
if command -v starship >/dev/null; then
    export STARSHIP_SHELL="zsh"
    export STARSHIP_CONFIG="$HOME/.config/starship/starship.toml"
    eval "$(starship init zsh)"
fi

{{- if eq .chezmoi.os "darwin" }}
# === macOS-specific Configuration ===

# Load Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"
export PATH="/opt/homebrew/opt/postgresql@16/bin:$PATH"

# Kitty shell integration
if [ -n "$KITTY_INSTALLATION_DIR" ]; then
    export KITTY_SHELL_INTEGRATION="enabled"
    autoload -Uz -- "$KITTY_INSTALLATION_DIR"/shell-integration/zsh/kitty-integration
    kitty-integration
    unfunction kitty-integration
fi

# Zsh syntax highlighting (installed via Homebrew)
if [ -f "/opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    source "/opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi
{{- else if eq .chezmoi.os "linux" }}
# === Linux-specific Configuration ===

# Load Homebrew if installed (Linuxbrew)
# Commented out - not available on this system
# [ -d "/home/linuxbrew/.linuxbrew" ] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# Enable color support for ls
alias ls='ls --color=auto'

# Add Ruby gems to PATH (for user-installed gems)
export PATH="$PATH:$HOME/.local/share/gem/ruby/3.4.0/bin"

# Claude Code CLI alias
alias claude="$HOME/.claude/local/claude"

# Zsh syntax highlighting (if installed via package manager)
if [ -f "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
    source "/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi
{{- end }}

# === Mise activation ===
if command -v mise >/dev/null; then
    eval "$(mise activate zsh)"
fi

# === Zsh Modules ===
zmodload zsh/complist
autoload -U compinit && compinit
autoload -U colors && colors

# === Carapace completions ===
if command -v carapace >/dev/null; then
    export CARAPACE_BRIDGES='zsh,fish,bash'
    source <(carapace _carapace)
fi

# === History Configuration ===
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_REDUCE_BLANKS
HISTSIZE=1000000
SAVEHIST=1000000
HISTFILE="$XDG_DATA_HOME/zsh/history"
HISTCONTROL=ignoreboth

# === Key Bindings ===
# Force emacs mode (overrides vi mode from EDITOR=nvim)
bindkey -e

# History search
bindkey '^r' history-incremental-search-backward
bindkey '^s' history-incremental-search-forward
bindkey '^p' up-line-or-search
bindkey '^n' down-line-or-search

# === Zsh Options ===
setopt AUTO_CD              # If command is a directory path, cd into it
setopt NO_CASE_GLOB        # Case insensitive globbing
setopt NUMERIC_GLOB_SORT   # Sort filenames numerically when relevant
setopt EXTENDED_GLOB       # Extended globbing capabilities
setopt AUTO_PUSHD          # Push the current directory visited on the stack
setopt PUSHD_IGNORE_DUPS   # Do not store duplicates in the stack
setopt PUSHD_SILENT        # Do not print the directory stack after pushd or popd
setopt CDABLE_VARS         # Change directory to a path stored in a variable
setopt BANG_HIST           # Treat the '!' character specially during expansion
setopt MULTIOS             # Write to multiple descriptors
setopt INTERACTIVE_COMMENTS # Allow comments in interactive shells
setopt COMPLETE_IN_WORD    # Complete from both ends of a word
setopt ALWAYS_TO_END       # Move cursor to the end of a completed word
setopt PATH_DIRS           # Perform path search even on command names with slashes
setopt AUTO_LIST           # Automatically list choices on ambiguous completion
setopt AUTO_PARAM_SLASH    # If completed parameter is a directory, add a trailing slash
setopt NO_MENU_COMPLETE    # Do not autoselect the first completion entry
setopt GLOBDOTS            # Include dotfiles in glob patterns

# Disable accidental ctrl-s (terminal freeze)
stty stop undef

# === Completion Styles ===
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'  # Case insensitive matching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$HOME/.zcompcache"
bindkey '^I' complete-word  # Tab for normal zsh completion

# === Zsh-specific Functions ===

# Yazi wrapper (zsh-specific for cd functionality)
y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        builtin cd -- "$cwd"
        if [ -n "$TMUX" ]; then
            tmux refresh-client -c "$cwd"
        fi
    fi
    rm -f -- "$tmp"
}

# Show key codes
showkey() {
    echo "Press any key combination to see its key code (Ctrl+C to exit)"
    while true; do
        read -k 1 -s key
        echo -n "Key pressed: "
        printf '%q' "$key" | sed 's/\^/Ctrl+/g'
        echo
        echo -n "Hex: "
        printf '%q' "$key" | xxd
    done
}

# Tmux launcher
t() {
    if [ -z "$TMUX" ]; then
        if tmux has-session -t T 2>/dev/null; then
            tmux attach-session -t T
        else
            tmux new-session -s T
        fi
    fi
}

# Logging
echo "$(date): Zsh shell loaded" >> "$LOGFILE"
