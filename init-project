#!/bin/bash
# Copyright (c) 2024 Tucker Craig
# See LICENSE file for full license details.

# Get the absolute directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common utilities
source "$SCRIPT_DIR/utils/common.sh"

# Function to show usage
show_usage() {
    cat << EOF
NAME
    $(basename "$0") - Initialize a new project with standard boilerplate

SYNOPSIS
    $(basename "$0") [DIRECTORY] [OPTIONS]
    $(basename "$0") [OPTIONS] -d DIRECTORY

DESCRIPTION
    Creates a new project directory with standard boilerplate code and configuration.
    Supports multiple programming languages and development environments.

ARGUMENTS
    DIRECTORY
        Project directory (use '.' for current directory). Can be provided as first
        argument or with -d flag.

OPTIONS
    -d, --directory DIRECTORY
        Alternative way to specify project directory

    -l, --lang LANGUAGE
        Project programming language [default: python]
        Supported: python (or py), go (or golang)

    -n, --name NAME
        Project name [default: directory name]

    -v, --python-version VERSION
        Python version for Python projects [optional]
        Format: 3.X or 3.X.X (e.g., 3.11 or 3.11.5)

    -h, --help
        Display this help message and exit

EXAMPLES
    $(basename "$0") .
        Create Python project in current directory

    $(basename "$0") my-project -v 3.11
        Create Python 3.11 project in ./my-project

    $(basename "$0") . -l go
        Create Go project in current directory

    $(basename "$0") api -l python -v 3.12
        Create Python 3.12 project in ./api

    $(basename "$0") -d . -n custom-name
        Create project in current directory with custom name

NOTES
    - Directory will be created if it doesn't exist
    - If no name is provided, the directory name will be used
    - Python version is optional; system default will be used if not specified
EOF
    exit 1
}

# Parse command line arguments
LANGUAGE="python"  # Default to Python
PROJECT_NAME=""
PROJECT_DIR=""
PYTHON_VERSION=""

# Check if first argument is a directory path and not an option
if [[ $# -gt 0 && ! "$1" =~ ^- ]]; then
    PROJECT_DIR="$1"
    shift
fi

while [[ $# -gt 0 ]]; do
    case $1 in
        -l|--lang|--language)
            if [ -z "$2" ]; then
                echo "Error: Language argument is required"
                show_usage
            fi
            LANGUAGE="$2"
            shift 2
            ;;
        -n|--name)
            if [ -z "$2" ]; then
                echo "Error: Name argument is required"
                show_usage
            fi
            PROJECT_NAME="$2"
            shift 2
            ;;
        -d|--directory)
            if [ -z "$2" ]; then
                echo "Error: Directory argument is required"
                show_usage
            fi
            if [ -n "$PROJECT_DIR" ]; then
                echo "Error: Directory already specified as '$PROJECT_DIR'"
                show_usage
            fi
            PROJECT_DIR="$2"
            shift 2
            ;;
        -v|--python-version)
            if [ -z "$2" ]; then
                echo "Error: Python version is required"
                show_usage
            fi
            PYTHON_VERSION="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            echo "Error: Unknown option: $1"
            show_usage
            ;;
    esac
done

# Validate required arguments
if [ -z "$PROJECT_DIR" ]; then
    echo "Error: Directory must be specified either as first argument or with -d/--directory"
    show_usage
fi

# Normalize language input
case "$LANGUAGE" in
    py|python)
        LANGUAGE="python"
        SETUP_SCRIPT="$SCRIPT_DIR/setup/setup-py"
        TEMPLATE_DIR="$SCRIPT_DIR/templates/python"
        ;;
    go|golang)
        LANGUAGE="go"
        SETUP_SCRIPT="$SCRIPT_DIR/setup/setup-go"
        TEMPLATE_DIR="$SCRIPT_DIR/templates/go"
        ;;
    *)
        echo "Error: Unsupported language: $LANGUAGE"
        show_usage
        ;;
esac

# Check if setup script exists
if [ ! -f "$SETUP_SCRIPT" ]; then
    echo "Error: Setup script not found at $SETUP_SCRIPT"
    exit 1
fi

# Handle project directory
if [ "$PROJECT_DIR" = "." ]; then
    if ! is_directory_empty "$(pwd)"; then
        echo "Error: Current directory is not empty"
        exit 1
    fi
    PROJECT_DIR="$(pwd)"
    if [ -z "$PROJECT_NAME" ]; then
        PROJECT_NAME=$(basename "$PROJECT_DIR")
    fi
else
    # Create new directory for project if it doesn't exist
    mkdir -p "$PROJECT_DIR"
    cd "$PROJECT_DIR" || { echo "Error: Failed to navigate to $PROJECT_DIR"; exit 1; }
    if [ -z "$PROJECT_NAME" ]; then
        PROJECT_NAME=$(basename "$PROJECT_DIR")
    fi
    echo "Using directory: $PROJECT_DIR"
fi

# Run the setup script with the specified Python version (if provided)
if [ "$LANGUAGE" = "python" ]; then
    chmod +x "$SETUP_SCRIPT"
    if [ -n "$PYTHON_VERSION" ]; then
        "$SETUP_SCRIPT" --version "$PYTHON_VERSION"
    else
        "$SETUP_SCRIPT"  # Run without version for default behavior
    fi
else
    chmod +x "$SETUP_SCRIPT"
    "$SETUP_SCRIPT"
fi

# Copy and process templates
copy_templates "$TEMPLATE_DIR" "$(pwd)" "$PROJECT_NAME"

# Language-specific initialization
case "$LANGUAGE" in
    python)
        # Create virtual environment
        python3 -m venv venv || { echo "Error: Failed to create virtual environment"; exit 1; }
        echo "Created virtual environment at venv/"
        ;;
    go)
        # Initialize Go module
        read -p "Enter the module name (e.g., github.com/username/project): " module_name
        go mod init "$module_name" || { echo "Error: Failed to initialize Go module"; exit 1; }
        echo "Initialized Go module: $module_name"
        ;;
esac

# Initialize Git repository
git init || { echo "Error: Failed to initialize Git repository"; exit 1; }
git add . || { echo "Error: Failed to add files to Git"; exit 1; }
git commit -m "Initial commit" || { echo "Error: Failed to commit changes"; exit 1; }

echo "âœ¨ $LANGUAGE project '$PROJECT_NAME' initialized successfully in $PROJECT_DIR!"