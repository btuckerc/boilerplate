#!/usr/bin/env bash
# Bootstrap script for dotfiles setup
# Installs chezmoi and applies dotfiles configuration

set -euo pipefail

echo "Starting dotfiles setup..."

# Set zsh as default shell if available
if command -v zsh >/dev/null 2>&1; then
    if [ "$SHELL" != "$(command -v zsh)" ]; then
        echo "Setting zsh as default shell..."
        sudo chsh -s "$(command -v zsh)" "$USER"
        echo "Default shell set to zsh (restart shell to apply)"
    else
        echo "zsh is already the default shell"
    fi
else
    echo "WARNING: zsh not found, skipping shell change"
fi

# Install and run chezmoi
DOTFILES_REPO="https://github.com/btuckerc/boilerplate.git"

if command -v chezmoi >/dev/null 2>&1; then
    echo "chezmoi already installed"
    echo "Applying dotfiles..."
    chezmoi init --apply "$DOTFILES_REPO"
    exit 0
fi

# Try installing via mise if available
if command -v mise >/dev/null 2>&1; then
    echo "Installing chezmoi via mise..."
    mise use --global chezmoi@latest
    eval "$(mise activate bash)"
    chezmoi init --apply "$DOTFILES_REPO"
    exit 0
fi

# Fallback: install chezmoi directly
echo "Installing chezmoi..."
if command -v brew >/dev/null 2>&1; then
    brew install chezmoi
elif command -v apt-get >/dev/null 2>&1; then
    sudo apt-get install -y chezmoi
else
    # Use chezmoi's install script as last resort
    sh -c "$(curl -fsLS get.chezmoi.io)" -- init --apply "$DOTFILES_REPO"
    exit 0
fi

echo "Applying dotfiles..."
chezmoi init --apply "$DOTFILES_REPO"

echo ""
echo "Dotfiles applied!"
echo ""

# Check for Homebrew first (needed for mise and packages)
if ! command -v brew >/dev/null 2>&1; then
    echo "Homebrew not found (important for automatic setup)"
    read -p "Would you like to install Homebrew? [Y/n] " -r resp
    if [[ ! "${resp,,}" =~ ^n ]]; then
        echo "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Source Homebrew
        if [[ $(uname -m) == "arm64" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        echo "✓ Homebrew installed"
    else
        echo "Skipped Homebrew installation"
    fi
    echo ""
fi

# Check for mise (needed for development tools)
if ! command -v mise >/dev/null 2>&1; then
    echo "mise not found (important for automatic setup)"
    read -p "Would you like to install mise? [Y/n] " -r resp
    if [[ ! "${resp,,}" =~ ^n ]]; then
        if command -v brew >/dev/null 2>&1; then
            echo "Installing mise via Homebrew..."
            brew install mise
            eval "$(mise activate bash 2>/dev/null || true)"
            echo "✓ mise installed"
        else
            echo "Homebrew not available. Install mise manually: https://mise.jdx.dev"
        fi
    else
        echo "Skipped mise installation"
    fi
    echo ""
fi

# Offer to run mise install
if command -v mise >/dev/null 2>&1; then
    echo "Install development tools via mise?"
    read -p "This will prompt for optional tools. [Y/n] " -r resp
    if [[ ! "${resp,,}" =~ ^n ]]; then
        mise install
    else
        echo "Skipped. Run 'mise install' later to install tools."
    fi
else
    echo "Skipped development tools (mise not available)"
fi

echo ""

# Offer to run brew bundle
if command -v brew >/dev/null 2>&1 && [ -f "$HOME/Brewfile" ]; then
    echo "Install Homebrew packages?"
    read -p "This will prompt for optional packages. [Y/n] " -r resp
    if [[ ! "${resp,,}" =~ ^n ]]; then
        if command -v brew-bundle-optional >/dev/null 2>&1; then
            brew-bundle-optional
        else
            brew bundle --file="$HOME/Brewfile"
        fi
    else
        echo "Skipped. Run 'brew-bundle-optional' later to install packages."
    fi
elif ! command -v brew >/dev/null 2>&1; then
    echo "Skipped Homebrew packages (brew not available)"
fi

echo ""
echo "Setup complete! Restart your shell or run: exec $SHELL"
