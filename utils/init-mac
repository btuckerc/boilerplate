#!/bin/bash
# Copyright (c) 2024 Tucker Craig
# See LICENSE file for full license details.

# Get the absolute directory of the current script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_step() {
    echo -e "${BLUE}==> $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}! $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

# Function to handle existing dotfiles
handle_existing_file() {
    local target_file="$1"
    local file_type="$2"
    local backup=false

    if [ -L "$target_file" ]; then
        if confirm "Existing $file_type symlink found at $target_file. Would you like to replace it?"; then
            rm "$target_file"
            backup=true
        else
            print_warning "$file_type symlink unchanged"
            return 1
        fi
    elif [ -f "$target_file" ]; then
        if confirm "Existing $file_type found at $target_file. Would you like to backup and replace it?"; then
            mv "$target_file" "$target_file.bak.$(date +%Y%m%d_%H%M%S)"
            print_warning "Existing $file_type backed up"
            backup=true
        else
            print_warning "$file_type unchanged"
            return 1
        fi
    fi
    return 0
}

# Function to show usage
show_usage() {
    cat << EOF
NAME
    $(basename "$0") - Initialize a new macOS development environment

SYNOPSIS
    $(basename "$0") [OPTIONS]

DESCRIPTION
    Sets up a new macOS development environment with standard configurations,
    including shell setup, package installation, and development tools.

OPTIONS
    -s, --shell SHELL
        Specify shell to use [default: current shell]
        Supported: bash, zsh

    -k, --skip-kitty
        Skip Kitty terminal installation

    -b, --skip-brew
        Skip Homebrew installation

    -h, --help
        Display this help message and exit

COMPONENTS
    The script will set up the following:
    - Shell configuration (Bash or Zsh)
    - Homebrew package manager
    - Kitty terminal emulator
    - Custom fonts (Meslo Nerd Font)
    - Neovim editor
    - Tmux terminal multiplexer
    - Development environment configurations

EXAMPLES
    $(basename "$0")
        Run complete setup with current shell

    $(basename "$0") -s zsh
        Run setup and switch to Zsh shell

    $(basename "$0") -k
        Run setup without Kitty terminal installation

NOTES
    - Requires macOS
    - Will create symlinks from dotfiles repository
    - Will backup existing configurations
    - Some operations may require sudo privileges
EOF
    exit 1
}

# Check if running on macOS
if [[ $(uname) != "Darwin" ]]; then
    print_error "This script is only for macOS!"
    exit 1
fi

# Repository root directory
REPO_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

# Parse command line arguments
SKIP_KITTY=false
SKIP_BREW=false
SHELL_CHOICE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -s|--shell)
            if [ -z "$2" ]; then
                print_error "Shell argument is required"
                show_usage
            fi
            SHELL_CHOICE="$2"
            shift 2
            ;;
        -k|--skip-kitty)
            SKIP_KITTY=true
            shift
            ;;
        -b|--skip-brew)
            SKIP_BREW=true
            shift
            ;;
        -h|--help)
            show_usage
            ;;
        *)
            print_error "Unknown option: $1"
            show_usage
            ;;
    esac
done

# Helper function for confirmations
confirm() {
    local message="$1"
    local default="${2:-n}"  # Default to 'n' if not specified
    
    local prompt
    if [ "$default" = "y" ]; then
        prompt="[Y/n]"
    else
        prompt="[y/N]"
    fi
    
    read -p "$message $prompt " response
    response=${response:-$default}  # Use default if empty
    
    case "$response" in
        [yY][eE][sS]|[yY]) return 0 ;;
        *) return 1 ;;
    esac
}

# Shell setup
setup_shell() {
    print_step "Shell Setup"
    
    # Detect current shell
    current_shell=$(basename "$SHELL")
    print_warning "Current shell is: $current_shell"
    
    if [ -z "$SHELL_CHOICE" ]; then
        echo -e "${YELLOW}Would you like to:"
        echo "1) Keep current shell ($current_shell)"
        echo "2) Switch to Bash"
        echo "3) Switch to Zsh${NC}"
        read -p "Enter choice [1-3]: " shell_choice
        
        case $shell_choice in
            1)
                print_warning "Keeping $current_shell as default shell"
                SHELL_CHOICE=$current_shell
                ;;
            2)
                print_step "Switching to Bash..."
                SHELL_CHOICE="bash"
                ;;
            3)
                print_step "Switching to Zsh..."
                SHELL_CHOICE="zsh"
                ;;
            *)
                print_error "Invalid choice. Keeping current shell."
                SHELL_CHOICE=$current_shell
                ;;
        esac
    fi
    
    # Change shell if needed
    if [ "$SHELL_CHOICE" != "$current_shell" ]; then
        if confirm "Do you want to change your default shell to $SHELL_CHOICE?"; then
            chsh -s "/bin/$SHELL_CHOICE"
        else
            print_warning "Shell change skipped"
        fi
    fi
    
    # Check for existing configurations and backup if needed
    local files_to_link=()
    if [[ "$SHELL_CHOICE" == "bash" ]]; then
        files_to_link=("bashrc" "bash_profile" "bash_aliases")
    elif [[ "$SHELL_CHOICE" == "zsh" ]]; then
        files_to_link=("zshrc" "zprofile" "zsh_aliases")
    fi
    
    # Create symlinks from dotfiles directory
    for file in "${files_to_link[@]}"; do
        if [ -f "$REPO_DIR/dotfiles/$file" ]; then
            if handle_existing_file "$HOME/.$file" "$file configuration"; then
                ln -sf "$REPO_DIR/dotfiles/$file" "$HOME/.$file"
                print_success "Linked $file from dotfiles directory"
            fi
        else
            print_error "File $file not found in dotfiles directory"
        fi
    done
    
    print_success "Shell configuration complete"
}

# Homebrew installation
setup_homebrew() {
    if [ "$SKIP_BREW" = true ]; then
        print_warning "Skipping Homebrew installation"
        return
    fi
    
    print_step "Installing Homebrew"
    if ! command -v brew &> /dev/null; then
        if confirm "Homebrew not found. Would you like to install it?"; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            print_success "Homebrew installed"
        else
            print_warning "Homebrew installation skipped"
            SKIP_BREW=true
        fi
    else
        print_warning "Homebrew already installed"
        if confirm "Would you like to update Homebrew?"; then
            brew update
            print_success "Homebrew updated"
        fi
    fi
}

# Kitty terminal setup
setup_kitty() {
    if [ "$SKIP_KITTY" = true ]; then
        print_warning "Skipping Kitty installation"
        return
    fi
    
    print_step "Setting up Kitty terminal"
    
    if ! command -v kitty &> /dev/null; then
        if confirm "Kitty terminal not found. Would you like to install it?"; then
            brew install --cask kitty
            print_success "Kitty installed"
        else
            print_warning "Kitty installation skipped"
            return
        fi
    else
        print_warning "Kitty already installed"
    fi
    
    if [ -f "$REPO_DIR/setup/setup-kitty" ]; then
        if confirm "Would you like to configure Kitty terminal?"; then
            bash "$REPO_DIR/setup/setup-kitty"
        else
            print_warning "Kitty configuration skipped"
        fi
    fi
}

# Font installation
setup_fonts() {
    print_step "Installing fonts"
    
    # Create local fonts directory if it doesn't exist
    local fonts_dir="$HOME/Library/Fonts"
    mkdir -p "$fonts_dir"
    
    # Install custom fonts from utils/fonts
    local custom_fonts_dir="$SCRIPT_DIR/fonts"
    if [ -d "$custom_fonts_dir" ]; then
        if confirm "Would you like to install custom Meslo Nerd Fonts?"; then
            print_step "Installing custom fonts from $custom_fonts_dir"
            cp "$custom_fonts_dir"/*.ttf "$fonts_dir/" 2>/dev/null || true
            cp "$custom_fonts_dir"/*.otf "$fonts_dir/" 2>/dev/null || true
            
            # Clear font cache
            if confirm "Would you like to clear the font cache? (recommended after font installation)"; then
                atsutil databases -remove
                print_success "Font cache cleared"
            fi
            print_success "Fonts installed"
        else
            print_warning "Font installation skipped"
        fi
    else
        print_error "Custom fonts directory not found at $custom_fonts_dir"
    fi
}

# Neovim setup
setup_neovim() {
    print_step "Setting up Neovim"
    
    if ! command -v nvim &> /dev/null; then
        if confirm "Neovim not found. Would you like to install it?"; then
            brew install neovim
            print_success "Neovim installed"
        else
            print_warning "Neovim installation skipped"
            return
        fi
    else
        print_warning "Neovim already installed"
    fi
    
    # Handle existing neovim configuration
    if ! handle_existing_file "$HOME/.config/nvim" "Neovim configuration directory"; then
        return
    fi
    
    mkdir -p ~/.config
    ln -sf "$REPO_DIR/nvim" ~/.config/nvim
    print_success "Neovim configuration linked"
}

# Tmux setup
setup_tmux() {
    print_step "Setting up Tmux"
    
    if ! command -v tmux &> /dev/null; then
        if confirm "Tmux not found. Would you like to install it?"; then
            brew install tmux
            print_success "Tmux installed"
        else
            print_warning "Tmux installation skipped"
            return
        fi
    else
        print_warning "Tmux already installed"
    fi
    
    # Handle existing tmux configuration
    if ! handle_existing_file "$HOME/.tmux.conf" "tmux configuration"; then
        return
    fi
    
    # Link tmux.conf from new location
    ln -sf "$REPO_DIR/config/tmux/tmux.conf" ~/.tmux.conf
    print_success "Tmux configuration linked"
    
    # Set up TPM
    local tpm_dir="$HOME/.tmux/plugins/tpm"
    if [ -d "$tpm_dir" ]; then
        if confirm "Existing TPM installation found. Would you like to replace it?"; then
            rm -rf "$tpm_dir"
        else
            print_warning "TPM setup skipped"
            return
        fi
    fi
    
    # Create .tmux/plugins directory if it doesn't exist
    mkdir -p "$HOME/.tmux/plugins"
    
    # Link TPM from our config
    ln -sf "$REPO_DIR/config/tmux/plugins/tpm" "$tpm_dir"
    print_success "TPM linked"
    
    # Install plugins
    if confirm "Would you like to install Tmux plugins now?"; then
        "$tpm_dir/bin/install_plugins"
        print_success "Tmux plugins installed"
    else
        print_warning "Plugin installation skipped. You can install them later with prefix + I"
    fi
}

# Main setup
main() {
    print_step "Starting Mac setup script"
    
    # Warn about potential changes
    cat << EOF
${YELLOW}This script will help you set up your macOS development environment.
It can make the following changes:
- Change your default shell
- Install and configure Homebrew
- Install and configure Kitty terminal
- Install custom fonts
- Install and configure Neovim
- Install and configure Tmux
- Create configuration symlinks

You will be asked for confirmation before any changes are made.${NC}
EOF
    
    if ! confirm "Would you like to proceed?" "n"; then
        print_warning "Setup cancelled"
        exit 0
    fi
    
    # Create .hushlogin to disable "Last login" message
    if [ ! -f ~/.hushlogin ]; then
        if confirm "Would you like to disable the 'Last login' terminal message?"; then
            touch ~/.hushlogin
            print_success "Created .hushlogin"
        fi
    fi
    
    # Run all setup functions
    setup_shell
    setup_homebrew
    setup_kitty
    setup_fonts
    setup_neovim
    setup_tmux
    
    print_success "Setup complete! Please restart your terminal for all changes to take effect."
    
    if [ "$SHELL_CHOICE" != "$current_shell" ]; then
        print_warning "Shell changed to $SHELL_CHOICE. You'll need to log out and back in for the change to take effect."
    fi
}

# Run main function
main 
